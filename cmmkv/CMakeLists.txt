cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
project(mmkv)
if(APPLE)
    add_compile_definitions(FORCE_POSIX)
endif()
add_subdirectory(../MMKV/Core Core)
add_library(cmmkv SHARED)
target_sources(cmmkv PRIVATE src/cmmkv.cpp)
if(WIN32)
    target_sources(cmmkv PRIVATE src/cmmkv.def)
endif()
target_include_directories(cmmkv PUBLIC include)
set_property(TARGET cmmkv PROPERTY CXX_STANDARD 17)
set_property(TARGET cmmkv PROPERTY CXX_STANDARD_REQUIRED ON)
target_link_libraries(cmmkv core)

if(APPLE)
    if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
        set(RUNTIME_IDENTIFIER osx-arm64)
    else()
        set(RUNTIME_IDENTIFIER osx-x64)
    endif()
elseif(UNIX)
    if(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
        set(RUNTIME_IDENTIFIER linux-arm64)
    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
        set(RUNTIME_IDENTIFIER linux-arm)
    else()
      set(RUNTIME_IDENTIFIER linux-x64)
    endif()
elseif(WIN32)    
    if(CMAKE_SHARED_LINKER_FLAGS MATCHES "ARM64" OR CMAKE_STATIC_LINKER_FLAGS MATCHES "ARM64")
        set(RUNTIME_IDENTIFIER win-arm64)
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(RUNTIME_IDENTIFIER win-x64)
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(RUNTIME_IDENTIFIER win-x86)
    else()
        message(FATAL_ERROR "Unsupported system !")
    endif()
else()
    message(FATAL_ERROR "Unsupported system !")
endif()
add_custom_command(TARGET cmmkv POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:cmmkv> ${CMAKE_SOURCE_DIR}/output/${RUNTIME_IDENTIFIER}/cmmkv.dll)